clc; clear;
% Import data file as matrix
airfoil = dlmread('NACA 4404 Data.txt');
airfoil = airfoil';
 
% Input Variables
sections = 5;
vehicle_mass = 70; % kg
 
% Constants
rho = .02; %kg/m^3
a = 240; %m/s
mu = 1.422*10^-5; %kg/m/s
g = 3.71; % m/s^2
 
weight = vehicle_mass * g;
blade_number = 4;
rotor_number = 4;
thrust_per_rotor = weight/rotor_number;
thrust_per_blade = thrust_per_rotor/blade_number;
 
% Define Output matrices
base_cs = dec2base(0:sections^sections-1,sections) - '0';
base_cs = base_cs + 1;
base_cs = base_cs';
thetas = zeros(1,sections); % angle of attack
cls = zeros(1,sections); % coefficient of lift
cds = zeros(1,sections); % coefficient of drag
cms = zeros(1,sections); % coefficient of moment
Ls = zeros(1,sections); % Lift
Ds = zeros(1,sections); % Drag
Ms_pitch = zeros(1,sections); % Pitching Moment
Ms_drag = zeros(1,sections); % Drag Moment
As = zeros(1,sections); % Area
Res = zeros(1,sections); % Reynolds number
ts = zeros(1,sections); % thickness

success_blades = [];

for r = 0.7 % 0.5:0.05:0.7
    r_min = 0.1 * r;
    cs = (r/2)/sections * base_cs;
    A_disk = pi*r^2;
    vi = sqrt(thrust_per_rotor / (2*rho*A_disk));
    for Mach = 0.8 % 0.6:0.05:0.8
        v_tip = Mach * a;
        for c = cs
            for count = 1:sections % iterate through sections
                As(count) = c(count)*(r-r_min)/sections;
                r_pos = r_min + (count - .5)*(r-r_min)/sections;
                v_inf = r_pos/r*v_tip; % average velocity of section
                phi = atan(vi/v_inf);
                v = vi/sin(phi);
                Re = v*c(count)*rho/mu; % average Reynolds of section
                if Re < 500
                    Re = 1000;
                end
                Re = round(Re,-3);
                
                % Find max cl/cd if ideal twist fails
                maxclcd = 0;
                for data_set = airfoil % iterate through data
                    if data_set(2) == Re
                        clcd = data_set(3)/data_set(4);
                        if clcd > maxclcd
                            maxclcd = clcd;
                            maxclcd_alfa = data_set(1);
                        end
                    end
                end
                % Pitch down
                for data_set = airfoil % iterate through data
                    if data_set(2) == Re && (data_set(1) - 5.0) == maxclcd_alfa
                        break
                    end
                end

                % Extract data for individual section of blade
                alfas(count) = data_set(1);
                thetas(count) = data_set(1) + phi;
                cls(count) = data_set(3)/sqrt(1-Mach^2);
                cds(count) = data_set(4)/sqrt(1-Mach^2);
                cms(count) = data_set(6)/sqrt(1-Mach^2);
                Ls(count) = cls(count)*.5*rho*v^2*c(count)*(r-r_min)/sections;
                Ds(count) = cds(count)*.5*rho*v^2*c(count)*(r-r_min)/sections;
                Ms_pitch(count) = cms(count)*.5*rho*v^2*c(count)^2*(r-r_min)/sections;
                Ms_drag(count) = Ds(count)*(count-.5)/sections;
            end
            
            A = sum(As); % total area
            solidity = blade_number * A / A_disk;
            
            % Converting individual sections into totals
            L = sum(Ls); % total lift
            D = sum(Ds); % 2D drag
            AR = r^2/A; % aspect ratio
            Di = (sum(cls)/sections)^2/pi/AR; % minimum induced drag
            D_total = D + Di; % total drag
            if L > thrust_per_blade
                cd = mean(cds);
                M_pitch = sum(Ms_pitch); % pitching moment
                M_drag = sum(Ms_drag); % moment from drag
                A = sum(As); % total reference area of blades
                solidity = blade_number * A / A_disk;
                
                % Store data
                storage.chords = c';
                storage.thrust = L;
                storage.blade_number = blade_number;
                storage.rotor_number = rotor_number;
                storage.pitches = thetas;
                storage.solidity = solidity;
                storage.CD0 = cd;
                storage.radius = r;
                storage.rpm = v_tip / (2*pi*r) * 60;
                success_blades = [success_blades, storage];
            end
        end
    end
end
fprintf('Total Possible Blades: %d\n',length(success_blades));
